/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 * Input: head = [3,2,0,-4], pos = 1
 * Output: true
 * Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
 *
 * Input: head = [1], pos = -1
 * Output: false
 * Explanation: There is no cycle in the linked list.
 *
 * Input: head = [1,2], pos = 0
 * Output: true
 * Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        int count = 0;
        Set<ListNode> nodes = new HashSet<>();
        ListNode curr = head;
        while(curr!=null)
        {
            if(nodes.contains(curr)) return true;
            nodes.add(curr);
            curr = curr.next;
        }
        return false;
    }
}
